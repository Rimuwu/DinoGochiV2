from telebot.types import ReplyKeyboardMarkup

from bot.config import mongo_client
from bot.modules.data_format import chunks, list_to_keyboard
from bot.modules.dinosaur import Dino, Egg
from bot.modules.localization import t, tranlate_data
from bot.modules.logs import log

users = mongo_client.bot.users

def back_menu(userid) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    """
    markup_key = 'main_menu'
    menus_list = ['main_menu', 'settings_menu', 
                  'main_menu', 'profile_menu', 'market_menu'
                  'main_menu', 'friends_menu', 'referal_menu'
                 ]
    user_dict = users.find_one(
        {'userid': userid}, {'last_markup': 1}
    )
    if user_dict:
        markup_key = user_dict.get('last_markup', 'main_menu')

    menu_ind = menus_list.index(markup_key)
    if markup_key and markup_key != 'main_menu':
        markup_key = menus_list[menu_ind - 1]
    else:
        markup_key = 'main_menu'
    
    return markup_key

def markups_menu(userid: int, markup_key: str = 'main_menu', language_code: str = 'en') -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
       menus:
       main_menu, settings_menu, profile_menu
       last_menu
    """
    prefix, buttons = 'commands_name.', []
    add_back_button = False

    if markup_key == 'last_menu':
       """–í–æ–∑—Ä–∞—â–∞–µ—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–µ–Ω—é
       """
       markup_key = users.find_one(
           {'userid': userid}, {'last_markup': 1}
        ).get('last_markup') #type: ignore
        
    else: #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ markup
        users.update_one({"userid": userid}, {'$set': {'last_markup': markup_key}})

    if markup_key == 'main_menu':
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons = [
            ['dino_profile', 'actions_menu', 'profile_menu'],
            ['settings_menu', 'friends_menu', 'faq'],
            ['dino-tavern_menu']
        ]
        settings = users.find_one({'userid': userid}, {'settings': 1}) or {}

        if settings.get('faq', 0): #–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë–º faq, —Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É #type: ignore
            buttons[1].remove('faq')
    
    elif markup_key == 'settings_menu':
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        prefix = 'commands_name.settings.'
        add_back_button = True
        buttons = [
            ['notification', 'faq'],
            ['inventory', 'dino_profile'],
            ['dino_name'],
        ]
    
    elif markup_key == 'profile_menu':
        # –ú–µ–Ω—é ghjabkz
        prefix = 'commands_name.profile.'
        add_back_button = True
        buttons = [
            ['information', 'inventory'],
            ['rayting', 'accessories', 'market'],
        ]
    
    else:
        log(prefix='Markup', 
            message=f'not_found_key User: {userid}, Data: {markup_key}', lvl=2)
    
    buttons = tranlate_data(
        data=buttons, 
        locale=language_code, 
        key_prefix=prefix) #–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞

    if add_back_button:
        buttons.append([t('buttons_name.back', language_code)])
    
    return list_to_keyboard(buttons)

def get_answer_keyboard(elements: list[Dino | Egg], lang: str='en') -> dict:
    """
       
       return 
       {'case': 0} - –Ω–µ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
       {'case': 1, 'element': Dino | Egg} - 1 –¥–∏–Ω–æ–∑–∞–≤—Ä / —è–π—Ü–æ 
       {'case': 2, 'keyboard': ReplyMarkup, 'data_names': dict} - –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
    """
    if len(elements) == 0:
        return {'case': 0}

    elif len(elements) == 1: # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
        return {'case': 1, 'element': elements[0]}

    else: # –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
        names, data_names = [], {}
        n, txt = 0, ''
        for element in elements:
            n += 1

            if type(element) == Dino:
                txt = f'{n}ü¶ï {element.name}' #type: ignore
            elif type(element) == Egg:
                txt = f'{n}ü•ö'
            
            data_names[txt] = element
            names.append(txt)
            
        buttons_list = list(chunks(names, 2)) #–¥–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ—á–∫–∏ –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        buttons_list.append([t('buttons_name.cancel', lang)]) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = list_to_keyboard(buttons_list, 2) #–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        return {'case': 2, 'keyboard': keyboard, 'data_names': data_names}