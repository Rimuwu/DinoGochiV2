from telebot.types import ReplyKeyboardMarkup

from bot.config import mongo_client
from bot.modules.data_format import chunks, crop_text, list_to_keyboard
from bot.modules.dinosaur import Dino, Egg
from bot.modules.localization import t, tranlate_data
from bot.modules.logs import log
from bot.modules.user import User, get_last_dino

users = mongo_client.bot.users
dinosaurs = mongo_client.bot.dinosaurs

def back_menu(userid) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    """
    markup_key = 'main_menu'
    menus_list = ['main_menu', 'settings_menu',
                  'main_menu', 'actions_menu', 
                  'main_menu', 'profile_menu', 'market_menu',
                  'main_menu', 'friends_menu', 'referal_menu',
                  'main_menu', 'dino_tavern_menu', 'dungeon_menu'
                 ] # —Å—Ö–µ–º–∞ –≤—Å–µ—Ö –ø—É—Ç–µ–π –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    user_dict = users.find_one(
        {'userid': userid}, {'last_markup': 1}
    )
    if user_dict:
        markup_key = user_dict.get('last_markup', 'main_menu')

    menu_ind = menus_list.index(markup_key)
    result = menus_list[menu_ind - 1]
    return result

def markups_menu(userid: int, markup_key: str = 'main_menu', 
                 language_code: str = 'en', last_menu: bool = False) -> ReplyKeyboardMarkup | None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
       menus:
       main_menu, settings_menu, profile_menu
       last_menu

       last_menu - –ï—Å–ª–∏ True, —Ç–æ –º–µ–Ω—é –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏,
       –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ
       –ü—Ä–∏–º–µ—Ä:

       markup_key: settings_menu, last_markup: profile_menu
       >>> last_menu: True -> –ú–µ–Ω—é –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
       >>> last_menu: False -> –ú–µ–Ω—é –∏–∑–º–µ–Ω–∏—Ç—Å—è
    """
    prefix, buttons = 'commands_name.', []
    add_back_button = False
    kwargs = {}
    old_last_menu = None

    if markup_key == 'last_menu':
       """–í–æ–∑—Ä–∞—â–∞–µ—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–µ–Ω—é
       """
       user_dict = users.find_one(
           {'userid': userid}, {'last_markup': 1}
        )
       if user_dict:
           markup_key = user_dict.get('last_markup')

    else: #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ markup
        if last_menu:
            user_dict = users.find_one(
                {'userid': userid}, {'last_markup': 1}
                )
            if user_dict:
                old_last_menu = user_dict.get('last_markup')
            
        users.update_one({"userid": userid}, {'$set': {'last_markup': markup_key}})

    if markup_key == 'main_menu':
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons = [
            ['dino_profile', 'actions_menu', 'profile_menu'],
            ['settings_menu', 'friends_menu', 'faq'],
            ['dino-tavern_menu']
        ]
        settings = users.find_one({'userid': userid}, {'settings': 1}) or {}

        if settings.get('faq', 0): #–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë–º faq, —Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É
            buttons[1].remove('faq')
    
    elif markup_key == 'settings_menu':
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        prefix = 'commands_name.settings.'
        add_back_button = True
        buttons = [
            ['notification', 'faq'],
            ['inventory', 'dino_profile'],
            ['dino_name'],
        ]
    
    elif markup_key == 'profile_menu':
        # –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        prefix = 'commands_name.profile.'
        add_back_button = True
        buttons = [
            ['information', 'inventory'],
            ['rayting', 'accessories', 'market'],
        ]
    
    elif markup_key == 'friends_menu':
        # –ú–µ–Ω—é –¥—Ä—É–∑–µ–π
        prefix = 'commands_name.friends.'
        add_back_button = True
        buttons = [
            ['add_friend', 'friends_list', 'remove_friend'],
            ['requests', 'referal'],
        ]
    
    elif markup_key == 'market_menu':
        # –ú–µ–Ω—é —Ä—ã–Ω–∫–∞
        prefix = 'commands_name.market.'
        add_back_button = True
        buttons = [
            ['random', 'find'],
            ['add_product', 'product_list', 'remove_product'],
        ]
    
    elif markup_key == 'actions_menu':

        def get_buttons(dino: Dino) -> list:
            data = ['journey', 'put_to_bed', 'collecting']
            if dino.stats == 'journey':
                data[0] = 'return'
            elif dino.stats == 'sleep':
                data[1] = 'awaken'
            elif dino.stats == 'collecting':
                data[2] = 'progress'

            return data

        # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        prefix = 'commands_name.actions.'
        add_back_button = True
        user = User(userid)
        col_dinos = user.get_col_dinos() #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª. –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤

        if col_dinos == 0:
            buttons = [
                ['no_dino']
            ]
        if col_dinos == 1:
            dino = user.get_dinos()[0]
            dp_buttons = get_buttons(dino)

            buttons = [
                ["feed"],
                ["entertainments", dp_buttons[0]],
                [dp_buttons[1], dp_buttons[2]]
            ]

        else:
            add_back_button = False
            last_dino = get_last_dino(user)
            if last_dino:
                dino_button = 'notranslate.' + t('commands_name.actions.dino_button', language_code) + " " + crop_text(last_dino.name, 6)

                dp_buttons = get_buttons(last_dino)
                buttons = [
                    ["feed"],
                    ["entertainments", dp_buttons[0]],
                    [dp_buttons[1], dp_buttons[2]],
                    [dino_button, "noprefix.buttons_name.back"]
                ]
    
    else:
        log(prefix='Markup', 
            message=f'not_found_key User: {userid}, Data: {markup_key}', lvl=2)
    
    buttons = tranlate_data(
        data=buttons, 
        locale=language_code, 
        key_prefix=prefix,
        **kwargs
        ) #–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞

    if add_back_button:
        buttons.append([t('buttons_name.back', language_code)])
    
    result = list_to_keyboard(buttons)
    if last_menu:
        user_dict = users.find_one(
           {'userid': userid}, {'last_markup': 1}
        )
        if user_dict:
            if not old_last_menu:
                old_last_menu = user_dict.get('last_markup')

            if old_last_menu != markup_key:
                result = None
    
    return result

def get_answer_keyboard(elements: list[Dino | Egg], lang: str='en') -> dict:
    """
       return 
       {'case': 0} - –Ω–µ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
       {'case': 1, 'element': Dino | Egg} - 1 –¥–∏–Ω–æ–∑–∞–≤—Ä / —è–π—Ü–æ 
       {'case': 2, 'keyboard': ReplyMarkup, 'data_names': dict} - –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
    """
    if len(elements) == 0:
        return {'case': 0}

    elif len(elements) == 1: # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
        return {'case': 1, 'element': elements[0]}

    else: # –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ / —è–∏—Ü
        names, data_names = [], {}
        n, txt = 0, ''
        for element in elements:
            n += 1

            if type(element) == Dino:
                txt = f'{n}ü¶ï {element.name}' #type: ignore
            elif type(element) == Egg:
                txt = f'{n}ü•ö'
            
            data_names[txt] = element
            names.append(txt)
            
        buttons_list = list(chunks(names, 2)) #–¥–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ—á–∫–∏ –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        buttons_list.append([t('buttons_name.cancel', lang)]) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = list_to_keyboard(buttons_list, 2) #–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        return {'case': 2, 'keyboard': keyboard, 'data_names': data_names}